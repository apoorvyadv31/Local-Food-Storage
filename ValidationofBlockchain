// Import required packages
const SHA256 = require(’crypto-js/sha256’);

// Define the class for a block class Block {
constructor(index, timestamp, data, previousHash = ’’) {
this.index = index; this.timestamp = timestamp; this.data = data; this.previousHash = previousHash; this.hash = this.calculateHash(); this.nonce = 0;
}

addBlock(newBlock) { newBlock.previousHash = this.getLatestBlock().hash; newBlock.mineBlock(this.difficulty); this.chain.push(newBlock);
}

isChainValid() {
for (let i = 1; i < this.chain.length; i++) { const currentBlock = this.chain[i];
const previousBlock = this.chain[i - 1];

if (currentBlock.hash !== currentBlock.calculateHash()) {
return false;
}

if (currentBlock.previousHash !== previousBlock.hash) {
return false;

}
calculateHash() {	}

return SHA256(this.index + this.previousHash
+ this.timestamp
+ JSON.stringify(this.data)
+ this.nonce).toString();
}
mineBlock(difficulty)
{
while(this.hash.substring(0, difficulty)
!== Array(difficulty + 1).join(’0’))
{
this.nonce++;
this.hash = this.calculateHash();
}
console.log(’Block mined: ’+ this.hash);
}
}

// Define the class for the blockchain class Blockchain {
constructor() { this.chain =
[this.createGenesisBlock()]; this.difficulty = 2;
}

createGenesisBlock() {
return new Block(0, ’01/01/2022’, ’Genesis Block’, ’0’);
getLatestBlock() {
return this.chain[this.chain.length - 1];
}
addBlock(newBlock) { newBlock.previousHash = this.getLatestBlock().hash; newBlock.mineBlock(this.difficulty); this.chain.push(newBlock);
}

isChainValid() {
for (let i = 1; i < this.chain.length; i++) { const currentBlock = this.chain[i];
const previousBlock = this.chain[i - 1];

if (currentBlock.hash !== currentBlock.calculateHash()) {
return false;
}

if (currentBlock.previousHash !== previousBlock.hash) {
return false;

}
}
// Create instances of the blockchain and add blocks to it
let myBlockchain = new Blockchain(); myBlockchain.addBlock(new Block(1, ’02/01/2022’
, { farmer: ’John Doe’,product: ’Apples’, quantity: 100, deliveryDate: ’02/15/2022’ })); myBlockchain.addBlock(new Block(2, ’02/15/2022’,
{ distributor: ’Jane Smith’,product: ’Apples’, quantity: 100, deliveryDate: ’02/28/2022’ })); myBlockchain.addBlock(new Block(3, ’02/28/2022’,
{ retailer: ’Mike Johnson’,product: ’Apples’, quantity: 100, deliveryDate: ’03/15/2022’ }));

// Check if the blockchain is valid console.log(’Is blockchain valid? ’
+ myBlockchain.isChainValid());

// Print the blockchain console.log(JSON.stringify(myBlockchain, null,4));
